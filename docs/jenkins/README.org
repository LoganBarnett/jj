#+title:     Jenkins Documentation
#+author:    Logan Barnett-Hoy
#+email:     logustus@gmail.com
#+date:      <2021-05-25 Tue>
#+language:  en
#+file_tags:
#+tags:

The Jenkins API documentation doesn't contain a lot of structure or examples of
payloads. We can document what we find here. This directory contains some
payloads from Jenkins, but also this document can cover some behaviors.

* Polling the build's log

The general URI is =<base>/<job>/<build number>/logText/progressiveText= to poll
the build's log.

In the case of being done from [[Waiting in the queue]], the URI is simply =<build
url>/logText/progressiveText=.

It takes the query parameter of =start=, which is a number indicating the
position in the log to start from. The resulting response will return the
=x-text-size= header, which is a number that can be fed into a new =start=.

Optionally =x-more-data= provides a boolean value indicating whether or not we
should continue polling. =x-more-data= may not be present, in which case the
polling should end.

* Enqueuing a build

The response will contain the standard =Location= header, which has a URL that
can be used to query the queue item state.

* Waiting in the queue

When polling the queue state, it will return a body containing an expiry time
inside the =why= field.  This is the time we should wait for the next request to
be made. It comes in a few different forms, which seem to differ based on the
Jenkins version. Here are some variants witnessed:

+ "In the quiet period. Expires in 1.234ms"
+ "In the quiet period. Expires in 3.14 sec"
+ "In the quiet period. Expires in 3 sec"
+ "In the quiet period. Expires in 3 secs"

Maybe there's a better, more consistent way to lift this information, but so far
we've resorted to parsing the text.

Once =why= is =null=, we can inspect =url= to get the true build URL (with the
build number). Prior to =why= being =null=, =url= will be present but will only
point to the job's URL (sans build number).
* Getting job data

In Jenkins nomenclature, the "job" is the entity which defines the settings for
the tasks ("builds") that get run.

Sometimes we want to get information about the job, such as whether or not it
requires parameters, and what those parameters are.
* Building with parameters

** Querying a job's parameters

I have found this [[https://stackoverflow.com/a/16576408][SO answer]] providing this example link:

#+begin_example
http://$HOST/jenkins/api/xml?xpath=/hudson/job[1]/build[1]/action[1]/parameter&depth=2
#+end_example

Which seems to be expecting a lot (lists always have 1 or 2 elements?).

Different builds can have different parameters. This does assume that you
already have a build, which might not be safe though.

This was also proposed:

#+begin_example
/job/<job>/lastSuccessfulBuild/api/xml
#+end_example

Keep in mind the =xml= part can also be =json=.

** Submitting a build with parameters

See https://wiki.jenkins.io/display/JENKINS/Parameterized+Build for
documentation.  It does warn that the documentation is deprecated but offers no
future version to reference, and searches all point back to this page.

Use
=/buildWithParameters?<param-name1>=<param-value1>&<param-name2>=<param-value2>=
to build with parameters.

If no parameters are available on the job, it just does a =build= instead, so
=jj= can _always_ use =buildWithParameters= safely.

The parameter name is case-sensitive!
